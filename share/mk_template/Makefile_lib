##
##
## A Makefile for compiling ATS programs and library
##
## Author: Zhiqiang Ren
## Date: 08/16/2012

######

#==================================

CWD=$(shell pwd)

MV  := mv -f
RM  := rm -rf
SED := sed

# todo
# modify ZLOG_PATH according to your environment
# ZLOG_PATH := /home/atsuser/programs/zlog-1.2.4/install
ZLOG_PATH := /home/grad2/aren/programs/zlog-1.2.4/zlog_install
ZLOG_INC := $(ZLOG_PATH)/include
ZLOG_LIB := $(ZLOG_PATH)/lib

#==================================

# Global check of environment, uncomment the following if necessary.
# ifndef XXX
# $(error XXX is undefined)
# endif

XREF="XREF"

ATSUSRQ="$(ATSHOME)"
ATSLIBQ=$(ATSUSRQ)
ifeq ($(ATSUSRQ),"")
ATSUSRQ="/usr"
endif # end of [ifeq]

ATSRUNTIME=$(ATSUSRQ)/ccomp/runtime

######

ATSCC=$(ATSUSRQ)/bin/atscc
ATSOPT=$(ATSUSRQ)/bin/atsopt

# todo
# The flag is for the "include" directory for compiling ats source files.
# This is needed by atscc
# Add more if nessary
ATSCCFLAGS=-IATS $(CWD)/SATS

# "include" directory for compilation of C code generated from ATS code. 
# This is needed by gcc.
ATS_CC_INC=-I $(ATSRUNTIME) -I $(ATSUSRQ) -I $(CWD)

#= convention of generated file name =================================

# e.g.
# xx.sats -> xx_sats.c
# xx.dats -> xx_dats.c
define atscname
$(patsubst %.dats,%_dats.c,$(patsubst %.sats,%_sats.c,$1))
endef

# e.g.
# xx.sats -> xx_sats.html
# xx.dats -> xx_dats.html
define atshtmlname
$(patsubst %.dats,%_dats.html,$(patsubst %.sats,%_sats.html,$1))
endef

#= general macro =================================
# todo
# The compiler of C/C++. If not specified explicitly here, makefile
# would use the default.
#CC=gcc
#CXX=g++

# file extension for dependency files ============
depgcc := depgcc
depdats := depdats
depsats := depsats


#= general functions =================================
# $(call source-to-object, source-file-list)
source-to-object = $(subst .c,.o,$(filter %.c,$1)) \
                   $(subst .cpp,.o,$(filter %.cpp,$1)) \
                   $(subst .sats,_sats.o,$(filter %.sats,$1)) \
                   $(subst .dats,_dats.o,$(filter %.dats,$1))

# This function is called inside the included module.mk
# $(subdirectory)
subdirectory = $(patsubst %/module.mk,%,    \
                 $(word                     \
                   $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST)))

#= functions for building specific target =================================
# ------------------------------------------------------

# todo add more functions for building new targets
# ------------------------------------------------------
# $(call make-zlog_test, program-name, source-file-list)
define make-zlog_test
  zlog_test  += $1
  sources += $2

  $(call source-to-object,$2): | check-env

  $1: $(call source-to-object,$2)
	$(CC) -o $$@ $(call source-to-object,$2) \
          -lzlog -L$(ZLOG_LIB) -pthread
endef

# ------------------------------------------------------
# $(call make-ats_zlog_lib, library-name, source-file-list)
define make-ats_zlog_lib
  ats_zlog_lib += $1
  sources    += $2

  $(call source-to-object,$2): | check-env

  $1: $(call source-to-object,$2)
	echo $$@
	$(AR) $(ARFLAGS) $$@ $(call source-to-object,$2)
endef

# ------------------------------------------------------
# $(call make-ats_zlog_program, program-name, source-file-list)
define make-ats_zlog_program
  ats_zlog_program += $1
  sources  += $2

  # The following line uses | to specify that check-env is a special prerequisite
  $(call source-to-object,$2): | check-env

  $1: $(call source-to-object,$2) $(ats_zlog_lib)
	$(ATSCC) -o $$@ $$(filter %.o,$$^) \
          -l$(patsubst lib%.a,%,$(notdir $(ats_zlog_lib))) -L$(dir $(ats_zlog_lib)) \
          -lzlog -L$(ZLOG_LIB) -pthread
endef

#= projects macro =================================

# Collect information from each module in these four variables.
# Initialize them here as simple variables
# targets
ats_zlog_lib     := # leave empty
ats_zlog_program := # leave empty
zlog_test        := # leave empty

sources          := # leave empty

# ==================================

objects      = $(call source-to-object,$(sources))

# sources consist of .cpp, .c, .sats, .dats
cpp_files = $(filter %.cpp,$(sources))
c_files   = $(filter %.c,$(sources))
sats_files= $(filter %.sats,$(sources))
dats_files= $(filter %.dats,$(sources))

# generated by atsopt
sats_c_files = $(call atscname,$(sats_files))
dats_c_files = $(call atscname,$(dats_files))
ats_c_files = $(sats_c_files) $(dats_c_files)

# html file
sats_html_files = $(call atshtmlname,$(sats_files))
dats_html_files = $(call atshtmlname,$(dats_files))
ats_html_files = $(sats_html_files) $(dats_html_files)

# obj file
ats_obj_files = $(subst .c,.o,$(ats_c_files))

# dependency files
cxx_dep = $(subst .cpp,.$(depgcc),$(cpp_files))
c_dep   = $(subst .c,.$(depgcc),$(c_files))

sats_c_dep   = $(subst .c,.$(depgcc),$(sats_c_files))
dats_c_dep   = $(subst .c,.$(depgcc),$(dats_c_files))

# dependency files generated by atsopt
sats_dep = $(subst .sats,.$(depsats),$(sats_files))
dats_dep = $(subst .dats,.$(depdats),$(dats_files))


dependencies = $(sats_dep) $(dats_dep) $(cxx_dep) $(c_dep) $(sats_c_dep) $(dats_c_dep)

# =========================================

# todo
# Add more directory to the varaible include_dirs as needed.
# It will affect the "include" directory for compiling C source files.
include_dirs := $(CWD)/CATS $(ZLOG_INC)
CPPFLAGS  += $(addprefix -I ,$(include_dirs))
CFLAGS    += -O0  # no optimization
CXXFLAGS  += -O0  # no optimization
# vpath %.h $(include_dirs)


# Target "all" has to appear here before eval
all:
# todo add more xx.mk here
include MISC/try_zlog/module.mk
include ./module.mk  # for libats_zlog.a
include TEST/module.mk # for building testing program

# The following must be after the "include".
# =targets ========================================

.PHONY: all
all: $(ats_zlog_lib) $(ats_zlog_program)

.PHONY: html
html: $(ats_html_files)

.PHONY: zlog_test
zlog_test: $(zlog_test)

.PHONY: library
library: $(ats_zlog_lib)

.PHONY: test
test: $(ats_zlog_program)

.PHONY: showpath
showpath: check-env
	@echo "LD_LIBRARY_PATH=\$${LD_LIBRARY_PATH}:$(ZLOG_LIB); export LD_LIBRARY_PATH"

.PHONY: clean
clean:
	$(RM) $(objects) \
        $(ats_zlog_program) \
        $(ats_zlog_lib) \
        $(zlog_test) \
        $(dependencies) \
        $(ats_c_files)

.PHONY: cleanall
cleanall: clean
	$(RM) $(ats_html_files)
	find ./ -name $(XREF) | xargs $(RM)

.PHONY: check-atsenv
check-atsenv:
ifndef ATSHOME
	$(error ATSHOME is undefined.)
endif
ifeq ($(wildcard $(ATSHOME)/bin/atscc), )
	$(error ATSHOME is not correct.)
endif

ifneq "$(MAKECMDGOALS)" "clean"
  ifneq "$(MAKECMDGOALS)" "cleanall"
    include $(dependencies)
  endif
endif

.PHONY: check-env
check-env:
ifndef ZLOG_PATH
	$(error ZLOG_PATH is undefined.)
endif
ifeq ($(wildcard $(ZLOG_INC)/zlog.h), )
	$(error ZLOG_INC is not correct.)
endif
ifeq ($(wildcard $(ZLOG_LIB)/libzlog.so), )
	$(error ZLOG_LIB is not correct.)
endif

ifneq "$(MAKECMDGOALS)" "clean"
  ifneq "$(MAKECMDGOALS)" "cleanall"
    include $(dependencies)
  endif
endif

# = rules ========================================
#
# %_sats.c: %.sats
$(sats_c_files): $(call atscname,%.sats): %.sats
	$(ATSOPT) --output $@ $(ATSCCFLAGS) --static $<; \
	if [ $$? -ne 0 ]; then \
          $(RM) $@; \
          rm $$$$.hack; \
        fi

# %_dats.c: %.dats
$(dats_c_files): $(call atscname,%.dats): %.dats
	$(ATSOPT) --output $@ $(ATSCCFLAGS) --dynamic $<; \
	if [ $$? -ne 0 ]; then \
          $(RM) $@; \
          rm $$$$.hack; \
        fi

#=========================

# %_sats.html: %.sats
$(sats_html_files): $(call atshtmlname,%.sats): %.sats
	cd $(dir $<); \
	test -d $(XREF) || mkdir -p $(XREF); \
	$(ATSOPT) --posmark_xref=$(XREF) $(ATSCCFLAGS) --static $(notdir $<) > $(notdir $@); \
	if [ $$? -ne 0 ]; then \
          $(RM) $@; \
          rm $$$$.hack; \
        fi

# %_dats.html: %.dats
$(dats_html_files): $(call atshtmlname,%.dats): %.dats
	cd $(dir $<); \
	test -d $(XREF) || mkdir -p $(XREF); \
	$(ATSOPT) --posmark_xref=$(XREF) $(ATSCCFLAGS) --dynamic $(notdir $<) > $(notdir $@); \
	if [ $$? -ne 0 ]; then \
          $(RM) $@; \
          rm $$$$.hack; \
        fi

#=========================

$(sats_files): %.sats: check-atsenv
$(dats_files): %.dats: check-atsenv

# xxx.depsats: xxx.sats
# example
# Purpose of using sed: two targets: .c and .depsats
# sed 's,.*:,SATS/zlog_sats.c SATS/zlog.depsats: ,g' > SATS/zlog.depsats.tmp
$(sats_dep): %.$(depsats): %.sats
	$(ATSOPT) $(ATSCCFLAGS) -dep1 -s $< | \
	$(SED) 's,.*:,$(call atscname,$<) $@: ,g' > $@.tmp
	$(MV) $@.tmp $@

# xxx.depdats: xxx.sats
# example
# Purpose of using sed: two targets: .c and .depdats
# sed 's,.*:,TEST/test_zlog_dats.c TEST/test_zlog.depdats: ,g' > TEST/test_zlog.depdats.tmp
$(dats_dep): %.$(depdats): %.dats
	$(ATSOPT) $(ATSCCFLAGS) -dep1 -d $< | \
	$(SED) 's,.*:,$(call atscname,$<) $@: ,g' > $@.tmp
	$(MV) $@.tmp $@

#=========================

# xxx.depgcc: xxx.cpp
# example
# Purpose of using sed: add path info to the .o target
$(cxx_dep): %.$(depgcc): %.cpp
	$(CXX) $(CFLAGS) $(CPPFLAGS) -M $< | \
	$(SED) 's,\($(notdir $*)\.o\)[ :]*,$(dir $@)\1 $@: ,g' > $@.tmp
	$(MV) $@.tmp $@

# xxx.depgcc: xxx.c
# example
# Purpose of using sed: add path info to the .o target
$(c_dep) : %.$(depgcc): %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -M $< | \
	$(SED) 's,\($(notdir $*)\.o\)[ :]*,$(dir $@)\1 $@: ,g' > $@.tmp
	$(MV) $@.tmp $@

# xxx.depgcc: xxx.c
# example
# Purpose of using sed: add path info to the .o target
$(sats_c_dep) $(dats_c_dep): %.$(depgcc): %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(ATS_CC_INC) -M $< | \
	$(SED) 's,\($(notdir $*)\.o\)[ :]*,$(dir $@)\1 $@: ,g' > $@.tmp
	$(MV) $@.tmp $@

#=========================

# xxx_sats.o: xxx_sats.c
# xxx_dats.o: xxx_dats.c
#
$(ats_obj_files): %.o: %.c
	$(COMPILE.c) $(ATS_CC_INC) $(OUTPUT_OPTION) $<







