##
##
## A Makefile for compiling ATS programs
##
## Author: Zhiqiang Ren
## Date: 08/16/2012

######

#==================================

CWD=$(shell pwd)

MV  := mv -f
RM  := rm -rf
SED := sed


#==================================

ifndef ATSHOME
$(error ATSHOME is undefined)
endif

XREF = "XREF"


ATSUSRQ="$(ATSHOME)"
ATSLIBQ=$(ATSUSRQ)
ifeq ($(ATSUSRQ),"")
ATSUSRQ="/usr"
endif # end of [ifeq]

ATSRUNTIME=$(ATSUSRQ)/ccomp/runtime

######

ATSCC=$(ATSUSRQ)/bin/atscc
ATSOPT=$(ATSUSRQ)/bin/atsopt

# todo
# The flag is for the "include" directory for compiling ats source files.
ATSCCFLAGS=-IATS $(CWD)/SATS

ATS_CC_INC=-I $(ATSRUNTIME) -I $(ATSUSRQ) -I $(CWD)

define atscname
$(patsubst %.dats,%_dats.c,$(patsubst %.sats,%_sats.c,$1))
endef

define atshtmlname
$(patsubst %.dats,%_dats.html,$(patsubst %.sats,%_sats.html,$1))
endef

#= general macro =================================

#CC=gcc
#CXX=g++

######

# file extension for dependency files
depgcc := depgcc
depats := depats


#= general functions =================================
# $(call source-to-object, source-file-list)
source-to-object = $(subst .c,.o,$(filter %.c,$1)) \
                   $(subst .cpp,.o,$(filter %.cpp,$1)) \
                   $(subst .sats,_sats.o,$(filter %.sats,$1)) \
                   $(subst .dats,_dats.o,$(filter %.dats,$1))


#= functions for building specific target =================================
# ------------------------------------------------------

# todo add more functions for building new kinds of target
# ------------------------------------------------------
# $(call make-ats_program, program-name, source-file-list)
define make-ats_program
  ats_program += $1
  sources  += $2

  $1: $(call source-to-object,$2)
	$(ATSCC) -o $$@ $$(filter %.o,$$^)
# todo add extra option (e.g. linking option) if necessary
endef

#= projects macro =================================

# Collect information from each module in these four variables.
# Initialize them here as simple variables

ats_program    :=

sources   :=

objects      = $(call source-to-object,$(sources))

# sources consist of .cpp, .c, .sats, .dats
cpp_files = $(filter %.cpp,$(sources))
c_files   = $(filter %.c,$(sources))
sats_files= $(filter %.sats,$(sources))
dats_files= $(filter %.dats,$(sources))

# generated by atsopt
sats_c_files = $(call atscname,$(sats_files))
dats_c_files = $(call atscname,$(dats_files))
ats_c_files = $(sats_c_files) $(dats_c_files)

# html file
sats_html_files = $(call atshtmlname,$(sats_files))
dats_html_files = $(call atshtmlname,$(dats_files))
ats_html_files = $(sats_html_files) $(dats_html_files)

ats_obj_files = $(subst .c,.o,$(ats_c_files))

# dependency files
cxx_dep = $(subst .cpp,.$(depgcc),$(cpp_files))
c_dep   = $(subst .c,.$(depgcc),$(c_files))

sats_c_dep   = $(subst .c,.$(depgcc),$(sats_c_files))
dats_c_dep   = $(subst .c,.$(depgcc),$(dats_c_files))

# dependency files generated by atsopt
sats_dep = $(subst .sats,.$(depats),$(sats_files))
dats_dep = $(subst .dats,.$(depats),$(dats_files))


dependencies = $(sats_dep) $(dats_dep) $(cxx_dep) $(c_dep) $(sats_c_dep) $(dats_c_dep)

# =========================================

# todo
# Add more directory to the varaible include_dirs as needed.
# It will affect the "include" directory for compiling C source files.
include_dirs := $(CWD)
CPPFLAGS  += $(addprefix -I ,$(include_dirs))
CFLAGS    += -O0  # no optimization
CXXFLAGS  += -O0  # no optimization
# vpath %.h $(include_dirs)


# Target "all" has to appear here before eval
all:

#======================================================================
# todo
# add more target here
$(eval $(call make-ats_program, test01, test01.dats add_lib.dats SATS/add_lib.sats))

# =targets ========================================

.PHONY: all
all: $(ats_program)

.PHONY: cleanall
cleanall: clean
	$(RM) $(ats_html_files)
	$(RM) $(XREF)

.PHONY: html
html: $(ats_html_files)

.PHONY: clean
clean:
	$(RM) $(objects) \
        $(ats_program) \
        $(dependencies) \
        $(ats_c_files)


ifneq "$(MAKECMDGOALS)" "clean"
  ifneq "$(MAKECMDGOALS)" "cleanall"
    include $(dependencies)
  endif
endif

# = rules ========================================
#
# %_sats.c: %.sats
$(sats_c_files): $(call atscname,%.sats): %.sats
	$(ATSOPT) --output $@ $(ATSCCFLAGS) --static $<; \
	if [ $$? -ne 0 ]; then \
          $(RM) $@; \
          rm $$$$.hack; \
        fi

# %_dats.c: %.dats
$(dats_c_files): $(call atscname,%.dats): %.dats
	$(ATSOPT) --output $@ $(ATSCCFLAGS) --dynamic $<; \
	if [ $$? -ne 0 ]; then \
          $(RM) $@; \
          rm $$$$.hack; \
        fi


# You should see here the usage of the | pipe operator, 
# defining an order only prerequisite. Meaning that the 
# $(XREF) target should be existent (instead of more recent) 
# in order to build the current target.
# %_sats.html: %.sats
$(sats_html_files): $(call atshtmlname,%.sats): %.sats | $(XREF)
	$(ATSOPT) --posmark_xref=$(XREF) $(ATSCCFLAGS) --static $< > $@; \
	if [ $$? -ne 0 ]; then \
          $(RM) $@; \
          rm $$$$.hack; \
        fi

# %_dats.html: %.dats
$(dats_html_files): $(call atshtmlname,%.dats): %.dats | $(XREF)
	$(ATSOPT) --posmark_xref=$(XREF) $(ATSCCFLAGS) --dynamic $< > $@; \
	if [ $$? -ne 0 ]; then \
          $(RM) $@; \
          rm $$$$.hack; \
        fi


$(XREF): 
	test -d $(XREF) || mkdir -p $(XREF)

#=========================


# xxx.depats: xxx.sats
$(sats_dep): %.$(depats): %.sats
	$(ATSOPT) $(ATSCCFLAGS) -dep1 -s $< | \
	$(SED) 's,\($(notdir $*)\.o\)[ :]*,$(dir $@)\1 $@: ,g' > $@.tmp
	$(MV) $@.tmp $@

# xxx.depats: xxx.sats
$(dats_dep): %.$(depats): %.dats
	$(ATSOPT) $(ATSCCFLAGS) -dep1 -d $< | \
	$(SED) 's,\($(notdir $*)\.o\)[ :]*,$(dir $@)\1 $@: ,g' > $@.tmp
	$(MV) $@.tmp $@

#=========================

# xxx.depgcc: xxx.cpp
$(cxx_dep): %.$(depgcc): %.cpp
	$(CXX) $(CFLAGS) $(CPPFLAGS) -M $< | \
	$(SED) 's,\($(notdir $*)\.o\)[ :]*,$(dir $@)\1 $@: ,g' > $@.tmp
	$(MV) $@.tmp $@

# xxx.depgcc: xxx.c
$(c_dep) : %.$(depgcc): %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) -M $< | \
	$(SED) 's,\($(notdir $*)\.o\)[ :]*,$(dir $@)\1 $@: ,g' > $@.tmp
	$(MV) $@.tmp $@

# xxx.depgcc: xxx.c
$(sats_c_dep) $(dats_c_dep): %.$(depgcc): %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(ATS_CC_INC) -M $< | \
	$(SED) 's,\($(notdir $*)\.o\)[ :]*,$(dir $@)\1 $@: ,g' > $@.tmp
	$(MV) $@.tmp $@

#=========================

# xxx_sats.o: xxx_sats.c
# xxx_dats.o: xxx_dats.c
#
$(ats_obj_files): %.o: %.c
	$(COMPILE.c) $(ATS_CC_INC) $(OUTPUT_OPTION) $<







